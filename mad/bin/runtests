#!/usr/bin/php
<?php
require_once 'PHPUnit/TextUI/Command.php';
require_once 'PHPUnit/Util/Class.php';
require_once 'PHPUnit/Util/Filter.php';
require_once 'PHPUnit/Runner/Version.php';
require_once 'PHPUnit/Util/Filter.php';

$version = PHPUnit_Runner_Version::id();

if ( version_compare( $version, '3.4.0' ) == -1 && $version !== '@package_version@' )
{
    die( "PHPUnit 3.4.0 (or later) is required to run this test suite.\n" );
}

PHPUnit_Util_Filter::addFileToFilter( __FILE__, 'PHPUNIT' );

// bootstrap
// All errors must be reported
$currentErrorLevel = error_reporting();
if ( $currentErrorLevel != ( E_ALL | E_STRICT ) )
{
    echo "Your error reporting setting is not E_ALL | E_STRICT, please change\nthis in your php.ini.\n";
    die();
}

require_once $_ENV['MAD_BOOTSTRAP'];

/**
 * @package MadCi
 */
class madTestRunner extends PHPUnit_TextUI_Command
{
    const SUITE_FILENAME = 'tests/suite.php';

    protected $arguments = array(
      'backupStaticAttributes'      => false,
      'convertErrorsToExceptions'   => true,
      'convertNoticesToExceptions'  => false,
      'convertWarningsToExceptions' => false,
      'listGroups'                  => false,
      'loader'                      => null,
      'useDefaultConfiguration'     => true
    );

    protected $release = 'trunk';

    protected function handleCustomTestSuite()
    {
        $directory = getcwd();
        $packages  = $this->options[1];

        $fillWhitelist = true;

        $this->arguments['test'] = new PHPUnit_Framework_TestSuite;
        $this->arguments['test']->setName( 'mad' );

        $this->arguments['reportDirectory'] = realpath( join( DIRECTORY_SEPARATOR, array(
            dirname( __FILE__ ),
            '..',
            'static',
            'coverage',
        ) ) );

        if ( empty( $packages ) )
        {
            $packages = $this->getPackages( $directory );
        }

        foreach ( $packages as $package )
        {
            $added      = true;
            $slashCount = substr_count( $package, DIRECTORY_SEPARATOR );
            
            $suite = $this->getTestSuite( $directory, $package );
            $this->arguments['test']->addTest( $suite );

            // exclude tests subdir
            $testIterator = new RecursiveIteratorIterator( new
                RecursiveDirectoryIterator( realpath( join(
                    DIRECTORY_SEPARATOR, array(  
                        $directory,
                        $package,
                        'tests'
                    ) 
                ) ) ) 
            );

            foreach( $testIterator as $fileInfo ) {
                PHPUnit_Util_Filter::addFileToFilter(
                    $fileInfo->getRealPath(  )
                );
            }
        }
        
        // exclude ezc file
        $testIterator = new RecursiveIteratorIterator( new
            RecursiveDirectoryIterator( realpath( join(
                DIRECTORY_SEPARATOR, array(  
                    $directory,
                    'ezc'
                ) 
            ) ) ) 
        );
        foreach( $testIterator as $fileInfo ) {
            PHPUnit_Util_Filter::addFileToFilter(
                $fileInfo->getRealPath(  )
            );
        }

        $colors = true;

        if ( isset( $this->arguments['debug'] ) && $this->arguments['debug'] === true )
        {
            $debug = true;
        }
        else
        {
            $debug = false;
        }

        if ( isset( $this->arguments['verbose'] ) && $this->arguments['verbose'] === true )
        {
            $verbose = true;
        }
        else
        {
            $verbose = false;
        }

        $this->arguments['printer'] = new ezcTestPrinter( null, $verbose, $colors, $debug );
    }

    protected function getPackages( $directory )
    {
        $packages = array();

        if ( is_dir( $directory ) )
        {
            $entries = glob( "$directory/*" );

            foreach ( $entries as $entry )
            { 
                if ( is_dir( "$entry/tests" ) )
                {
                    $packages[] = str_replace( $directory . '/', '', $entry );
                }
            }
        }

        return $packages;
    }

    protected function isPackageDir( $directory )
    {
        if ( !is_dir( $directory ) || !file_exists( $directory . '/tests/suite.php' ) )
        {
            return false;
        }

        return true;
    }

    protected function getTestSuite( $directory, $package )
    {
        $suitePath = join( DIRECTORY_SEPARATOR, array( 
            $directory, $package, self::SUITE_FILENAME
        ) );

        if ( file_exists( $suitePath ) )
        {
            $className = shell_exec( "grep -o 'class [a-zA-Z]*Suite' $suitePath | grep -o '[a-zA-Z]*$'" );
            $className = trim( $className );
            
            include_once $suitePath;

            $suite = call_user_func( array( $className, 'suite' ) );

            return $suite;
        }

        return null;
    }
}

$runner = new madTestRunner;
$runner->run($_SERVER['argv']);
?>
