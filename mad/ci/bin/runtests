#!/usr/bin/env php
<?php
require_once 'PHPUnit/TextUI/Command.php';
require_once 'PHPUnit/Util/Class.php';
require_once 'PHPUnit/Util/Filter.php';
require_once 'PHPUnit/Runner/Version.php';
require_once 'PHPUnit/Util/Filter.php';

$version = PHPUnit_Runner_Version::id();

if ( version_compare( $version, '3.4.0' ) == -1 && $version !== '@package_version@' )
{
    die( "PHPUnit 3.4.0 (or later) is required to run this test suite.\n" );
}

PHPUnit_Util_Filter::addFileToFilter( __FILE__, 'PHPUNIT' );

// bootstrap
// All errors must be reported
$currentErrorLevel = error_reporting();
if ( $currentErrorLevel != ( E_ALL | E_STRICT ) )
{
    echo "Your error reporting setting is not E_ALL | E_STRICT, please change\nthis in your php.ini.\n";
    die();
}

require_once $_ENV['MAD_BOOTSTRAP'];

//ini_set( 'include_path', getcwd(). PATH_SEPARATOR . dirname( __FILE__ ) . '/../..' . PATH_SEPARATOR . ini_get( 'include_path' ) );

//require_once 'Base/src/base.php';

//function __autoload( $className )
//{
    //if ( strpos( $className, '_' ) !== false )
    //{
        //$file = str_replace( '_', '/', $className ) . '.php';
        //$val = require_once( $file );
        //if ( $val == 0 )
            //return true;
        //return false;
    //}
    //ezcBase::autoload( $className );
//}

/**
 * @package MadCi
 */
class madTestRunner extends PHPUnit_TextUI_Command
{
    const SUITE_FILENAME = 'tests/suite.php';

    protected $arguments = array(
      'backupStaticAttributes'      => false,
      'convertErrorsToExceptions'   => true,
      'convertNoticesToExceptions'  => false,
      'convertWarningsToExceptions' => false,
      'listGroups'                  => false,
      'loader'                      => null,
      'useDefaultConfiguration'     => true
    );

    protected $release = 'trunk';

    protected function handleCustomTestSuite()
    {
        $directory = getcwd();
        $packages  = $this->options[1];

        $fillWhitelist = true;

        $this->arguments['test'] = new PHPUnit_Framework_TestSuite;
        $this->arguments['test']->setName( 'mad' );

        if ( empty( $packages ) )
        {
            $packages = $this->getPackages( $directory );
        }

        foreach ( $packages as $package )
        {
            $added      = true;
            $slashCount = substr_count( $package, DIRECTORY_SEPARATOR );
            
            $suite = $this->getTestSuite( $directory, $package );
            $this->arguments['test']->addTest( $suite );

            //if ( ( $this->release == 'trunk'  && $slashCount !== 0 ) ||
                 //( $this->release == 'stable' && $slashCount > 1 ) )
            //{
                //if ( file_exists( $package ) )
                //{
                    //PHPUnit_Util_Class::collectStart();
                    //require_once( $package );
                    //$class = PHPUnit_Util_Class::collectEnd();

                    //if ( !empty( $class ) )
                    //{
                        //$this->arguments['test']->addTest( call_user_func( array( array_pop( $class ), 'suite' ) ) );
                        //$added   = true;
                        //$package = substr($package, 0, strpos($package, DIRECTORY_SEPARATOR));
                    //}
                    //else
                    //{
                        //die( "\n Cannot load: $package. \n" );
                    //}
                //}
            //}
            //else 
            //{
                //$suite = $this->getTestSuite( $directory, $package );

                //if ( !is_null( $suite ) )
                //{
                    //$this->arguments['test']->addTest( $suite );
                    //$added = true;
                //}
            //}

            if ( $fillWhitelist && $added )
            {
                foreach ( glob( $directory . '/' . $package . '/*_autoload.php' ) as $autoloadFile )
                {
                    foreach ( include $autoloadFile as $className => $fileName )
                    {
                        if ( strpos($fileName, 'xmlwritersubstitute.php') === false )
                        {
                            $white = $directory . '/' . $fileName;
                            $split = split( '/', $white );
                            // ignore package/test files
                            if( $split[count( $split )-2] == 'tests' ) {
                                continue;
                            }

                            PHPUnit_Util_Filter::addFileToWhitelist(
                                $white
                            );
                        }
                    }
                }
            }
        }

        if ( isset( $this->arguments['colors'] ) && $this->arguments['colors'] === true )
        {
            $colors = true;
        }
        else
        {
            $colors = false;
        }

        if ( isset( $this->arguments['debug'] ) && $this->arguments['debug'] === true )
        {
            $debug = true;
        }
        else
        {
            $debug = false;
        }

        if ( isset( $this->arguments['verbose'] ) && $this->arguments['verbose'] === true )
        {
            $verbose = true;
        }
        else
        {
            $verbose = false;
        }

        $this->arguments['printer'] = new ezcTestPrinter( null, $verbose, $colors, $debug );
    }

    protected function getPackages( $directory )
    {
        $packages = array();

        if ( is_dir( $directory ) )
        {
            $entries = glob( "$directory/*" );

            foreach ( $entries as $entry )
            {
                if ( $this->isPackageDir( $entry ) )
                {
                    $packages[] = str_replace( $directory . '/', '', $entry );
                }
            }
        }

        return $packages;
    }

    protected function isPackageDir( $directory )
    {
        if ( !is_dir( $directory ) || !file_exists( $directory . '/tests/suite.php' ) )
        {
            return false;
        }

        return true;
    }

    protected function getTestSuite( $directory, $package )
    {
        $suitePath = join( DIRECTORY_SEPARATOR, array( 
            $directory, $package, self::SUITE_FILENAME
        ) );

        if ( file_exists( $suitePath ) )
        {
            include_once $suitePath;

            $className = 'mad'. ucfirst( $package ) . 'Suite';
            $suite     = call_user_func( array( $className, 'suite' ) );

            return $suite;
        }

        return null;
    }

    protected function handleDsn( $value )
    {
        try
        {
            $ts       = ezcTestSettings::getInstance();
            $settings = ezcDbFactory::parseDSN( $value );

            $ts->db->value = $value;
        
            try
            {
                $ts->setDatabaseSettings( $settings );
                $db = ezcDbFactory::create( $settings );
                ezcDbInstance::set( $db );
            }
            catch ( ezcDbException $e )
            {
                die( $e->getMessage() );
            }
        }
        catch ( Exception $e )
        {
            die( "Database initialization error: {$e->getMessage()}\n" );
        }
    }

    protected function handleRelease( $value )
    {
        $this->release = $value;
    }
}

$runner = new madTestRunner;
$runner->run($_SERVER['argv']);
?>
